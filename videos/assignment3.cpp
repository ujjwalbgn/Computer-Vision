

// include necessary dependencies
#include <iostream>
#include <cstdio>
#include "opencv2/opencv.hpp"

// configuration parameters
#define NUM_COMNMAND_LINE_ARGUMENTS 1

int main(int argc, char **argv)
{
    // store video capture parameters
    std::string fileName;

    // validate and parse the command line arguments
    if (argc != NUM_COMNMAND_LINE_ARGUMENTS + 1)
    {
        std::printf("USAGE: %s <file_path> \n", argv[0]);
        return 0;
    }
    else
    {
        fileName = argv[1];
    }

    // open the video file
    cv::VideoCapture capture(fileName);
    if (!capture.isOpened())
    {
        std::printf("Unable to open video source, terminating program! \n");
        return 0;
    }

    // get the video source parameters
    int captureWidth = static_cast<int>(capture.get(cv::CAP_PROP_FRAME_WIDTH));
    int captureHeight = static_cast<int>(capture.get(cv::CAP_PROP_FRAME_HEIGHT));
    int captureFPS = static_cast<int>(capture.get(cv::CAP_PROP_FPS));
    std::cout << "Video source opened successfully (width=" << captureWidth << " height=" << captureHeight << " fps=" << captureFPS << ")!" << std::endl;

    // create image window
    cv::namedWindow("captureFrame", cv::WINDOW_AUTOSIZE);
    cv::namedWindow("fgMask", cv::WINDOW_AUTOSIZE);

    // set background filtering parameters
    const int bgHistory = 200;
    const float bgThreshold = 500;
    const bool bgShadowDetection = true;          //originaly was false
    cv::Mat fgMask;                               //fg mask generated by MOG2 method
    cv::Ptr<cv::BackgroundSubtractor> pMOG2, knn; //MOG2 and knn Background subtractor
    pMOG2 = cv::createBackgroundSubtractorMOG2(bgHistory, bgThreshold, bgShadowDetection);
    knn = cv::createBackgroundSubtractorKNN(bgHistory, bgThreshold, bgShadowDetection);

    // process data until program termination
    bool doCapture = true;
    int frameCount = 0;
    while (doCapture)
    {
        // get the start time
        double startTicks = static_cast<double>(cv::getTickCount());

        // attempt to acquire and process an image frame
        cv::Mat captureFrame;
        cv::Mat grayFrame;
        //cv::Mat processedFrame;
        bool captureSuccess = capture.read(captureFrame);

        //
        cv::Mat imageEdges;
        cv::Mat imageContours;

        cv::Point oppLine[2];

        int intHorizontalLinePosition = (int)std::round((double)captureFrame.rows * 0.30);

        oppLine[0].x = 0;
        oppLine[0].y = intHorizontalLinePosition;

        oppLine[1].x = captureFrame.cols - 1;
        oppLine[1].y = intHorizontalLinePosition;
        cv::line(captureFrame, oppLine[0], oppLine[1], cv::Scalar(255, 0, 0), 2);

        //
        if (captureSuccess)
        {

            // pre-process the raw image frame
            const int rangeMin = 0;
            const int rangeMax = 255;
            cv::cvtColor(captureFrame, grayFrame, cv::COLOR_BGR2GRAY);
            cv::normalize(grayFrame, grayFrame, rangeMin, rangeMax, cv::NORM_MINMAX, CV_8UC1);

            // extract the foreground mask from image
            knn->apply(grayFrame, fgMask);

            //////

            // find the image edges
            const double cannyThreshold1 = 100;
            const double cannyThreshold2 = 200;
            const int cannyAperture = 3;
            cv::Canny(fgMask, imageEdges, cannyThreshold1, cannyThreshold2, cannyAperture);

            // erode and dilate the edges to remove noise
            int morphologySize = 1;
            cv::Mat edgesDilated;
            cv::dilate(imageEdges, edgesDilated, cv::Mat(), cv::Point(-1, -1), morphologySize);
            cv::Mat edgesEroded;
            cv::erode(edgesDilated, edgesEroded, cv::Mat(), cv::Point(-1, -1), morphologySize);

            // locate the image contours (after applying a threshold or canny)
            std::vector<std::vector<cv::Point>> contours;
            std::vector<int> hierarchy;
            cv::findContours(edgesEroded, contours, cv::RETR_EXTERNAL, cv::CHAIN_APPROX_SIMPLE, cv::Point(0, 0));

            // draw the contours
            imageContours = cv::Mat::zeros(edgesEroded.size(), CV_8UC3);
            for (int i = 0; i < contours.size(); i++)
            {
                cv::Scalar color = cv::Scalar(255, 255, 255);
                cv::drawContours(imageContours, contours, i, color);
            }

            // compute minimum area bounding rectangles
            std::vector<cv::RotatedRect> minAreaRectangles(contours.size());
            for (int i = 0; i < contours.size(); i++)
            {
                // compute a minimum area bounding rectangle for the contour
                minAreaRectangles[i] = cv::minAreaRect(contours[i]);
            }
            // draw the rectangles
            cv::Scalar color_rec;
            cv::Mat imageRectangles = cv::Mat::zeros(imageContours.size(), CV_8UC3);
            for (int i = 0; i < contours.size(); i++)
            {

                cv::Point2f rectanglePoints[4];
                minAreaRectangles[i].points(rectanglePoints);

                for (int j = 0; j < 4; j++)
                {
                    if ((contours.at(i).size() >= 200) && contours.at(i).size() < 350)
                    {

                        cv::Rect rectangle = minAreaRectangles[i].boundingRect();
                        int cx = (rectangle.x + rectangle.width) / 2;
                        int cy = ( + rectangle.height) / 2;

                        if (rectangle.y > intHorizontalLinePosition)
                        {
                            color_rec = cv::Scalar(0, 0, 255); // Red Color
                        }
                        else
                        {
                            color_rec = cv::Scalar(0, 255, 0); // Green Color
                        }

                        cv::rectangle(captureFrame, rectangle, color_rec, 2);
                    }
                }
            }

            // increment the frame counter
            frameCount++;
        }
        else
        {
            std::printf("Unable to acquire image frame! \n");
            return 0;
        }

        // update the GUI window if necessary
        if (captureSuccess)
        {
            cv::imshow("captureFrame", captureFrame);
            cv::imshow("imageEdges", imageEdges);
            cv::imshow("imageContours", imageContours);
            cv::imshow("fgMask", fgMask);

            // get the number of milliseconds per frame
            int delayMs = (1.0 / captureFPS) * 1000;

            // check for program termination
            if (((char)cv::waitKey(delayMs)) == 'q')
            {
                doCapture = false;
            }
        }

        // compute the frame processing time
        double endTicks = static_cast<double>(cv::getTickCount());
        double elapsedTime = (endTicks - startTicks) / cv::getTickFrequency();
        // std::cout << "Frame processing time: " << elapsedTime << std::endl;
    }

    // release program resources before returning
    capture.release();
    cv::destroyAllWindows();
}
